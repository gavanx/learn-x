// Code generated by dagger-compiler.  Do not edit.
package coffee;

import java.util.Set;

import javax.inject.Provider;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;

/**
 * A {@code Binding<CoffeeMaker>} implementation which satisfies Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code CoffeeMaker} and its dependencies.
 *
 * Being a {@code Provider<CoffeeMaker>} and handling creation and preparation of object instances.
 *
 * Being a {@code MembersInjector<CoffeeMaker>} and handling injection of annotated fields.
 */
public final class CoffeeMaker$$InjectAdapter extends Binding<CoffeeMaker> implements Provider<CoffeeMaker>, MembersInjector<CoffeeMaker> {
    private Binding<dagger.Lazy<Heater>> heater;
    private Binding<Pump> pump;

    public CoffeeMaker$$InjectAdapter() {
        super("coffee.CoffeeMaker", "members/coffee.CoffeeMaker", NOT_SINGLETON, CoffeeMaker.class);
    }

    /**
     * Used internally to link bindings/providers together at run time according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
        heater = (Binding<dagger.Lazy<Heater>>) linker.requestBinding("dagger.Lazy<coffee.Heater>", CoffeeMaker.class, getClass().getClassLoader());
        pump = (Binding<Pump>) linker.requestBinding("coffee.Pump", CoffeeMaker.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
        injectMembersBindings.add(heater);
        injectMembersBindings.add(pump);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for {@code Provider<CoffeeMaker>}.
     */
    @Override
    public CoffeeMaker get() {
        CoffeeMaker result = new CoffeeMaker();
        injectMembers(result);
        return result;
    }

    /**
     * Injects any {@code @Inject} annotated fields in the given instance, satisfying the contract for {@code Provider<CoffeeMaker>}.
     */
    @Override
    public void injectMembers(CoffeeMaker object) {
        object.heater = heater.get();
        object.pump = pump.get();
    }

}
